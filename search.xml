<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>树莓派无屏安装ubuntu 20.04 server</title>
      <link href="/2021/08/23/shu-mei-pai-wu-ping-an-zhuang-ubuntu-20.04-server/"/>
      <url>/2021/08/23/shu-mei-pai-wu-ping-an-zhuang-ubuntu-20.04-server/</url>
      
        <content type="html"><![CDATA[<h1 id="树莓派无屏安装ubuntu-20-04-server"><a href="#树莓派无屏安装ubuntu-20-04-server" class="headerlink" title="树莓派无屏安装ubuntu 20.04 server"></a>树莓派无屏安装ubuntu 20.04 server</h1><h2 id="安装系统镜像"><a href="#安装系统镜像" class="headerlink" title="安装系统镜像"></a>安装系统镜像</h2><p>硬件：</p><p>​    树莓派4b，8G内存，16G内存卡，读卡器</p><p>软件：</p><p>​    Raspberry PI Imager</p><p>镜像：</p><p>​    <a href="https://ubuntu.com/download/raspberry-pi">https://ubuntu.com/download/raspberry-pi</a></p><p>​    ubuntu 20.04 LTS</p><h2 id="配置wifi，ssh"><a href="#配置wifi，ssh" class="headerlink" title="配置wifi，ssh"></a>配置wifi，ssh</h2><p>重新插拔读卡器，在弹出的boot盘中创建空的SSH文件，并在net*.conf（忘了）中添加wifi信息</p><h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><pre><code># 备份sudo cp -p /etc/apt/sources.list /etc/apt/sources.list.bak# 打开sudo vim /etc/apt/sources.list# 替换，是树莓派的源:1,$s/ports.ubuntu.com\/ubuntu-ports/mirrors.aliyun.com\/ubuntu-ports\//g:wq# 更新软件列表sudo apt-get update# 更新软件sudo apt-get upgrade</code></pre><h2 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h2><pre><code>#下载ARMv8的nodejs包，这里下的是v14.17.5wget https://nodejs.org/dist/v14.17.5/node-v14.17.5-linux-arm64.tar.xz#解压tar xvf node-v14.17.5-linux-arm64.tar.xz#改名并更换路径mv node-v14.17.5-linux-arm64/ nodejsmv nodejs/ /usr/local/# 这里不用建立软连接，而用环境变量，这样解决npm安装全局模块找不到的问题export NODE_PATH=/usr/local/nodejs/binexport PATH=$&#123;PATH&#125;:$&#123;NODE_PATH&#125;echo &quot;PATH=\$&#123;PATH&#125;:$&#123;NODE_PATH&#125;&quot; &gt; ~/.profile# 或者对全部用户有效，则把~/.profile改为/etc/profile</code></pre><h3 id="Linux-usr-bin与-usr-local-bin使用区别"><a href="#Linux-usr-bin与-usr-local-bin使用区别" class="headerlink" title="Linux /usr/bin与/usr/local/bin使用区别"></a>Linux /usr/bin与/usr/local/bin使用区别</h3><p>首先注意usr 指 Unix System Resource，而不是User<br> 然后通常：<br> /usr/bin下面的都是系统预装的可执行程序，会随着系统升级而改变。<br> /usr/local/bin目录是给用户放置自己的可执行程序的地方，推荐放在这里，不会被系统升级而覆盖同名文件。</p><p>如果两个目录下有相同的可执行程序，谁优先执行受到PATH环境变量的影响，比如我的一台服务器的PATH变量为。<br> echo $PATH</p><p>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin</p><p>/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/dean/bin<br> 这里/usr/local/bin优先于/usr/bin, 一般都是如此。</p><h3 id="npm换源"><a href="#npm换源" class="headerlink" title="npm换源"></a>npm换源</h3><pre><code>npm config set registry https://registry.npm.taobao.org#或者用cnpmnpm install -g cnpm --registry=https://registry.npm.taobao.org#查看源npm config get registry</code></pre>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派4b </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>饥荒攻略</title>
      <link href="/2021/08/23/ji-huang-gong-lue/"/>
      <url>/2021/08/23/ji-huang-gong-lue/</url>
      
        <content type="html"><![CDATA[<h1 id="月圆之夜"><a href="#月圆之夜" class="headerlink" title="月圆之夜"></a>月圆之夜</h1><pre><code>* 切斯特放9个噩梦燃料，然后升级到12格* 猪王旁的格罗姆之花。 格里姆放在基地</code></pre><h1 id="兔人"><a href="#兔人" class="headerlink" title="兔人"></a>兔人</h1><pre><code>* 能用胡萝卜收买打猪* 能主动打猎犬* 不能带肉，可以放在切斯特里</code></pre><h1 id="地下远古遗迹"><a href="#地下远古遗迹" class="headerlink" title="地下远古遗迹"></a>地下远古遗迹</h1><pre><code>* 打蠕虫，下地洞* 拿光美做鼹鼠帽， 给鼹鼠石头能增加鼹鼠新鲜度</code></pre><h1 id="龙樱"><a href="#龙樱" class="headerlink" title="龙樱"></a>龙樱</h1><p><img src="https://shiyize.coding.net/p/services/d/imagesbed/git/raw/master/img/2021/8/24/1eae58c8c134f3c1f282ba02f7ea5a6.png"></p>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 饥荒 </tag>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解锁网易云无版权和VIP歌曲</title>
      <link href="/2020/09/21/jie-suo-wang-yi-yun-wu-ban-quan-he-vip-ge-qu/"/>
      <url>/2020/09/21/jie-suo-wang-yi-yun-wu-ban-quan-he-vip-ge-qu/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>舍友买了一个OpenWrt的路由器，支持很多插件。其中一个插件比较有意思，打开之后，网易云的无版权歌曲和VIP歌曲都可以听。经过研究发现，原理是采用 [QQ/虾米/百度/酷狗/酷我/咕咪/JOOX]等音源 替换网易云变灰歌曲链接，然后设置代理转发这部分歌曲即可。本文将介绍免费使用这一功能的几种方法。</p><h2 id="懒人法："><a href="#懒人法：" class="headerlink" title="懒人法："></a>懒人法：</h2><p>在网上搜索“解锁网易云音乐小工具”并下载，打开后界面如下。Windows保持默认设置即可。需要注意的两点：</p><ol><li>端口号不能和其它程序冲突。端口号用于设置网易云的代理转发。</li><li>音源排序决定替换音乐的顺序。音源顺序不同可能会导致有的歌曲版本不同。</li></ol><p><img src="https://shiyize.coding.net/p/services/d/imagesbed/git/raw/master/img/2020/9/21/202083857124952.jpg" alt="202083857124952"></p><p>打开网易云音乐，设置服务器ip（一般为本机）和端口号（上面工具设置的端口号），点击确定，即可完成。</p><p><img src="https://shiyize.coding.net/p/services/d/imagesbed/git/raw/master/img/2020/9/21/image-20200921140721937.png" alt="image-20200921140721937"></p><p>效果展示：</p><p><img src="https://shiyize.coding.net/p/services/d/imagesbed/git/raw/master/img/2020/9/21/image-20200921141551911.png" alt="image-20200921141551911"></p><h2 id="DIY法："><a href="#DIY法：" class="headerlink" title="DIY法："></a>DIY法：</h2><p>该工具作者的源码都是公开的，github地址：<a href="https://github.com/nondanee/UnblockNeteaseMusic">https://github.com/nondanee/UnblockNeteaseMusic</a></p><p>里面有很多玩法，最简单的就是在自己服务器上搭建一个方便使用。</p><p>先把代码拷贝下来</p><pre><code>git clone https://github.com/nondanee/UnblockNeteaseMusic</code></pre><p>进入文件夹并使用node启动app.js。没有node自行安装。</p><pre><code> cd UnblockNeteaseMusic/ node app.js</code></pre><p>然后在网易云下设置代理即可。</p><p>如果想后台运行，使用nohup和&amp;，并exit退出中断。如果想选择音源的顺序，可以加上参数-o，例：</p><pre><code>nohup node app.js qq kugou kuwo migu &amp;exit</code></pre><h2 id="其它补充："><a href="#其它补充：" class="headerlink" title="其它补充："></a>其它补充：</h2><p>手机平板等配置稍微麻烦那么一点，如果部署在路由器中，那其它设备就不需要设置了。一些参考链接：</p><p><a href="https://spoience.com/unlock-163.html">https://spoience.com/unlock-163.html</a></p><p><a href="https://github.com/maxlicheng/luci-app-unblockmusic">https://github.com/maxlicheng/luci-app-unblockmusic</a></p><p><a href="https://github.com/nining377/UnblockMusicPro_Xposed/releases">https://github.com/nining377/UnblockMusicPro_Xposed/releases</a></p>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网易云 </tag>
            
            <tag> 白嫖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+coding搭建博客</title>
      <link href="/2020/09/11/hexo-coding-da-jian-bo-ke/"/>
      <url>/2020/09/11/hexo-coding-da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="前情"><a href="#前情" class="headerlink" title="前情"></a>前情</h2><p>一直有搭建个人博客的想法，但是苦于没有合适服务器和没时间，加上技术选择困难症，一直拖了好久。奈何搭建这种云端服务非常有意思，一旦开始做就停不下来，所以花了3天左右时间搭建了一个博客，基本能开始写博客，至于文章分类、添加各种功能后面再慢慢搞。</p><p>在该过程中，最大的困难是，有多种技术方案可以选择，各有优劣（主要是穷），花在纠结上的时间太多了。比如网站是用服务器加Wordpress搭建动态网站，还是hexo+GitHub搭建静态网站。是托管在GitHub、Gitee还是Coding.net上，图床选择是继续白嫖代码仓库还是白嫖七牛云，博客Markdown是在线写还是在本地写。如果有钱的话，这些问题都不是问题，问题就是我只想白嫖。</p><p>目前网站的技术方案是hexo+coding pages托管+coding图床+PicGo图床上传+Typora写Markdown。</p><p>在此感谢各位大佬们写的技术帖，本站才能逐步搭建起来。</p><p>hexo+github+coding 搭建博客教程：</p><p>​    超逸：<a href="https://blog.csdn.net/weixin_42429718/article/details/104378207?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase">https://blog.csdn.net/weixin_42429718/article/details/104378207?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase</a></p><p>​    洪卫：<a href="https://sunhwee.com/posts/6e8839eb.html">https://sunhwee.com/posts/6e8839eb.html</a></p><p>​    过客～励む：<a href="https://yafine-blog.cn/posts/4ab2.html">https://yafine-blog.cn/posts/4ab2.html</a></p><p>图床搭建+Typora关联图床：<a href="https://www.cnblogs.com/MemoryDrive/articles/13296996.html">https://www.cnblogs.com/MemoryDrive/articles/13296996.html</a></p><h2 id="hexo静态网站"><a href="#hexo静态网站" class="headerlink" title="hexo静态网站"></a>hexo静态网站</h2><h2 id="coding-pages托管"><a href="#coding-pages托管" class="headerlink" title="coding pages托管"></a>coding pages托管</h2><h2 id="coding图床"><a href="#coding图床" class="headerlink" title="coding图床"></a>coding图床</h2><h2 id="PicGo图床上传"><a href="#PicGo图床上传" class="headerlink" title="PicGo图床上传"></a>PicGo图床上传</h2><h2 id="Typora编辑器"><a href="#Typora编辑器" class="headerlink" title="Typora编辑器"></a>Typora编辑器</h2>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 托管 </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一次Vue前端正式开发记录</title>
      <link href="/2020/09/11/yi-ci-vue-qian-duan-zheng-shi-kai-fa-ji-lu/"/>
      <url>/2020/09/11/yi-ci-vue-qian-duan-zheng-shi-kai-fa-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-使用"><a href="#Git-使用" class="headerlink" title="Git 使用"></a>Git 使用</h1><p>以前虽然也有git使用经验，不过仅限于自己使用上传代码到GitHub，缺乏团队协作的经验。这次开发团队算我共四人，使用GitLab协同开发前端。在此仅介绍常用的使用命令。具体的git使用教程将发布在干货篇。</p><h2 id="克隆团队代码"><a href="#克隆团队代码" class="headerlink" title="克隆团队代码"></a>克隆团队代码</h2><p>团队协作中，主程序将项目创建完成后，我们这些打杂的就要把项目克隆下来了。在空闲文件夹打开命令行，输入命令。</p><pre><code>git clone 团队代码仓库地址</code></pre><p><img src="https://shiyize.coding.net/p/services/d/imagesbed/git/raw/master/img/2020/9/11/1.png" alt="1"></p><h2 id="更新代码"><a href="#更新代码" class="headerlink" title="更新代码"></a>更新代码</h2><p>每当早上睁眼第一件事，就是将代码更新到团队最新代码。</p><pre><code>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code></pre><p>比如，要取回<code>origin</code>主机的<code>development</code>分支，与本地的<code>master</code>分支合并，需要写成下面这样 </p><pre><code>git pull origin development:master</code></pre><p>如果远程分支要与当前分支合并，则冒号后面的部分可以省略。上面命令可以简写为：</p><pre><code>git pull origin development</code></pre><p>如果当前分支与远程分支存在追踪关系，<code>git pull</code>就可以省略远程分支名。如果当前分支只有一个追踪分支，连远程主机名都可以省略。所以一般直接省略即可。</p><pre><code>git pull</code></pre><p>补充: 每次提交代码前，如果别人也修改了代码并提交，需要先pull下代码，再push提交。如果有冲突的话，需要先手动合并之后再push。</p><p>参考链接：<a href="https://www.yiibai.com/git/git_pull.html">https://www.yiibai.com/git/git_pull.html</a></p><h2 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h2><p>写完自己的代码，自然就要提交上去了。</p><pre><code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code></pre><p>push这个命令与pull非常相似，在同一个项目开发过程中，一般可以直接省略参数。</p><pre><code>git push</code></pre><p>参考链接：<a href="https://www.yiibai.com/git/git_push.html">https://www.yiibai.com/git/git_push.html</a></p><h2 id="上传本地项目到GitHub的两种方法"><a href="#上传本地项目到GitHub的两种方法" class="headerlink" title="上传本地项目到GitHub的两种方法"></a>上传本地项目到GitHub的两种方法</h2><p>此部分是本次开发过程的格外补充，用于上传代码到自己的代码仓库。</p><h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h3><p>先在GitHub创建一个新的代码仓库。然后用git clone命令下载到本地</p><p>这时候文件夹内容和仓库内容保持一致，一般为空或者有个README.md。</p><p>然后，把自己的项目代码复制到该文件夹下。然后依次输入以下命令</p><pre><code>git add .        （注：别忘记后面的.，此操作是把Test文件夹下面的文件都添加进来）git commit  -m  &quot;提交信息&quot;  （注：“提交信息”里面换成你需要，如“first commit”）git push -u origin master   （注：此操作目的是把本地仓库push到github上面，此步骤需要你输入帐号和密码）</code></pre><p>代码上传完成。</p><h3 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h3><p>先把本地项目代码变成代码仓库。</p><pre><code>git initgit add .git commit -m &quot;提交信息&quot;</code></pre><p>然后将自己本地仓库和远程仓库进行连接</p><pre><code>git remote add origin 仓库地址</code></pre><p>关联好之后，就可以提交代码了</p><pre><code>git push -u origin master</code></pre><p>由于新建的远程仓库是空的，所以要加上-u这个参数，等远程仓库里面有了内容之后，就可以去掉-u了。一般来说就已经完成了，但这里有个坑。如果远程仓库是空的，则该过程没问题。但如果远程仓库不为空，如有个README.md，则会报一个failed to push some refs to <a href="https://github.com/guyibang/TEST2.git%E7%9A%84%E9%94%99%E3%80%82">https://github.com/guyibang/TEST2.git的错。</a></p><p><img src="https://shiyize.coding.net/p/services/d/imagesbed/git/raw/master/img/2020/9/11/20170414212947320.png" alt="20170414212947320"></p><p>这是由于你新创建的那个仓库里面的README文件不在本地仓库目录中，这时我们可以通过以下命令先将内容合并以下：</p><pre><code>git pull --rebase origin master</code></pre><p>这时候再push就可以了。</p><p>参考链接：<a href="https://blog.csdn.net/Lucky_LXG/article/details/77849212">https://blog.csdn.net/Lucky_LXG/article/details/77849212</a></p><h1 id="前端部分"><a href="#前端部分" class="headerlink" title="前端部分"></a>前端部分</h1><p>在本次开发过程中，体会到了完全按甲方要求来的前端开发流程。如何让每个元素位置精确到像素、各种组件的视觉效果实现的和设计图一模一样等。主要包含四个部分：蓝湖、CSS、Element组件、Echarts组件。</p><h2 id="蓝湖"><a href="#蓝湖" class="headerlink" title="蓝湖"></a>蓝湖</h2><p>网址：<a href="https://lanhuapp.com/">https://lanhuapp.com/</a></p><p><img src="https://shiyize.coding.net/p/services/d/imagesbed/git/raw/master/img/2020/9/11/image-20200911164141811.png" alt="image-20200911164141811"></p><p>蓝湖是一个Webbase的UI设计的工具。UI设计师在PS中画好图后，上传到蓝湖平台，可以进行切图。前端开发人员可以点击每个元素，获得每个元素的位置信息，颜色信息，字体信息等等详细参数，并可以直接复制到CSS中，大大加快了开发速度，并很容易使得实际实现效果和设计图保持一致。</p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>本次CSS学到的知识点有：</p><ol><li>使用marign、padding等控制div的位置。</li><li>background颜色设置。字体设置。</li><li>使用CSS画圆角矩形。</li><li>使用::before ::after伪元素</li><li>全局CSS和局部CSS</li></ol><h2 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h2><p>网址：<a href="https://element.eleme.io/#/zh-CN">https://element.eleme.io/#/zh-CN</a></p><p>Element是饿了么公司开发的Vue前端组件，使用组件可以快速完成前端开发。</p><p>主要技术：</p><ol><li>布局。非常重要，用来控制元素的位置。把元素按行和列排布，每行是24个单位。</li><li>表格Table。相关样式设置。</li><li>弹框Dialog。相关样式设置。</li><li>加载Loading。向后台请求数据比较慢的时候，应加上加载。</li><li>其它可探索的组件参见官网。</li></ol><h2 id="Echarts"><a href="#Echarts" class="headerlink" title="Echarts"></a>Echarts</h2><p>网址：<a href="https://echarts.apache.org/examples/zh/index.html">https://echarts.apache.org/examples/zh/index.html</a></p><p>Echarts为开发者提供了大量数据可视化的组件。我开发时候涉及到一个仪表盘的样式调整。</p><p><img src="https://shiyize.coding.net/p/services/d/imagesbed/git/raw/master/img/2020/9/11/image-20200911170430640.png" alt="image-20200911170430640"></p><p>而官网提供的仪表盘长这样</p><p><img src="https://shiyize.coding.net/p/services/d/imagesbed/git/raw/master/img/2020/9/11/image-20200911170559542.png" alt="image-20200911170559542"></p><p>最难的三个参数是颜色渐变、刻度盘刻度从颜色外伸出来、指针的图案。</p><p>颜色渐变网上有代码，直接把几个颜色填进去即可。</p><p>设计图中的刻度是在颜色圈之外开始伸长，但官网提供的都是在颜色圈内开始伸长，调了好久都没找到相应的参数。最后灵机一动，把表盘宽度调成负数，成功~~</p><p>指针的图案最后也没有很好的解决，一种解决方案是可以把设计图中的指针图片直接切下来贴上去。具体怎么实现有点麻烦，最后我只设置了颜色渐变，和设计图达到类似的效果。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>经过这次开发经历，git使用更加熟练。以前做的前端都是实现功能就好，至于视觉效果并不在意，这次开发过程中学到了CSS的重要性，以及配合蓝湖实现像素级精确的效果。同时也体验了想变就变的甲方对开发计划打乱的影响。</p><p>宿迁饭店为啥各类肠子这么多？？</p>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> git </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
